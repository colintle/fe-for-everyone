version: '3.9'
services:
  frontend:
    platform: linux/amd64
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - "${FRONTEND_PORT_ON_DOCKER_HOST}:${FRONTEND_PORT_ON_CONTAINER}"
    networks:
      - fe-network
    volumes:
      - ./frontend/:/react-docker:delegated
      - /node_modules
  backend:
    platform: linux/amd64
    build: ./backend
    networks:
      - fe-network
    env_file: .env
    depends_on:
      - db
    ports:
      - ${BACKEND_PORT_ON_DOCKER_HOST}:${BACKEND_PORT_ON_CONTAINER}
    volumes:
      - ./backend/:/app
    command: ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT_ON_CONTAINER}"
  websocket-service:
    env_file: .env
    platform: linux/amd64
    build: ./websocket-service
    ports:
      - "${WEBSOCKET_PORT_ON_DOCKER_HOST}:${WEBSOCKET_PORT_ON_CONTAINER}"
    volumes:
      - ./websocket-service/:/app:delegated
    networks:
      - fe-network
  db:
    container_name: postgres-container
    image: postgres:14.1-alpine
    env_file: .env
    ports:
      - ${DB_PORT_ON_DOCKER_HOST}:${DB_PORT_ON_CONTAINER}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - fe-network
  redis:
    image: "redis:alpine"
    ports:
      - "${REDIS_PORT_ON_DOCKER_HOST}:${REDIS_PORT_ON_CONTAINER}"
    networks:
      - fe-network
    volumes:
      - redis-data:/data
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_MESSAGE_PORT_ON_DOCKER_HOST}:${RABBITMQ_MESSAGE_PORT_ON_CONTAINER}"
      - "${RABBITMQ_MANAGEMENT_PORT_ON_DOCKER_HOST}:${RABBITMQ_MANAGEMENT_PORT_ON_CONTAINER}"
    networks:
      - fe-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

volumes:
  db:
  redis-data:
  rabbitmq_data:

networks:
  fe-network:
    name: fe-network
    driver: bridge
