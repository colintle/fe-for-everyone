version: '3.9'
services:
  frontend:
    platform: linux/amd64
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3001:3000"
    volumes:
      - ./frontend/:/react-docker:delegated
      - /node_modules
  backend:
    platform: linux/amd64
    build: ./backend
    networks:
      - spring-boot-postgres-network
    env_file: .env
    depends_on:
      - db
    ports:
      - ${APPLICATION_PORT_ON_DOCKER_HOST}:${APPLICATION_PORT_ON_CONTAINER}
      - ${DEBUG_PORT_ON_DOCKER_HOST}:${DEBUG_PORT_ON_CONTAINER}
    volumes:
      - ./backend/:/app
    command: ./mvnw spring-boot:run -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${DEBUG_PORT_ON_CONTAINER}"
  websocket-service:
    platform: linux/amd64
    build: ./websocket-service
    ports:
      - "8083:8081"
    volumes:
      - ./websocket-service/:/app
  db:
    container_name: postgres-container
    image: postgres:14.1-alpine
    env_file: .env
    ports:
      - ${DB_PORT_ON_DOCKER_HOST}:${DB_PORT_ON_CONTAINER}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - spring-boot-postgres-network
  
volumes:
  db:
networks:
  spring-boot-postgres-network:
